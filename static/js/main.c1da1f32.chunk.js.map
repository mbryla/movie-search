{"version":3,"sources":["config.js","redux/actions.js","api.js","SearchForm.js","MoviesList.js","App.js","redux/reducer.js","redux/store.js","serviceWorker.js","index.js"],"names":["API_ADDRESS","concat","FETCHING_MOVIE","RECEIVED_MOVIE","FAILED_TO_RECEIVE_MOVIE","FETCHING_MOVIES","RECEIVED_MOVIES","FAILED_TO_RECEIVE_MOVIES","fetchMovies","title","releaseYear","dispatch","type","fetchingMovies","titleSearchString","arguments","length","undefined","page","address","fetch","then","response","json","getMovies","result","Error","failedToReceiveMovies","movies","Search","catch","error","SearchForm","state","onTitleChange","event","_this","setState","Object","objectSpread","target","value","onYearChange","onKeyPress","key","onSearch","dispatchFetchMovie","props","_this$state","react_default","a","createElement","className","htmlFor","id","name","this","onChange","min","max","onClick","PureComponent","connect","MoviesList","map","movie","imdbID","src","Poster","alt","Title","Year","_this$props$fetching","fetching","getErrorMessage","_this$props$fetching2","renderError","renderMovies","App","src_SearchForm","src_MoviesList","Component","INITIAL_STATE","storeInstance","createStore","action","applyMiddleware","thunk","Boolean","window","location","hostname","match","ReactDOM","render","es","store","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c1da1f32.chunk.js","sourcesContent":["const API_KEY = 'f395a408';\r\nexport const API_ADDRESS = `http://www.omdbapi.com/?apikey=${API_KEY}`;","import { getMovie, getMovies } from '../api';\r\n\r\nexport const FETCHING_MOVIE = 'FETCHING_MOVIE';\r\nexport const RECEIVED_MOVIE = 'RECEIVED_MOVIE';\r\nexport const FAILED_TO_RECEIVE_MOVIE = 'FAILED_TO_RECEIVE_MOVIE';\r\n\r\nexport const FETCHING_MOVIES = 'FETCHING_MOVIES';\r\nexport const RECEIVED_MOVIES = 'RECEIVED_MOVIES';\r\nexport const FAILED_TO_RECEIVE_MOVIES = 'FAILED_TO_RECEIVE_MOVIES';\r\n\r\nexport function fetchMovie(title, releaseYear) {\r\n  return (dispatch) => {\r\n    dispatch(fetchingMovie(title, releaseYear));\r\n    getMovie(title, releaseYear).then(result => {\r\n      if (result.Error) {\r\n        return dispatch(failedToReceiveMovie(result.Error));\r\n      }\r\n      return dispatch(receivedMovie(result))\r\n    }).catch(error => \r\n      dispatch(failedToReceiveMovie(error))\r\n    );\r\n  }\r\n}\r\n\r\nfunction fetchingMovie(title, releaseYear) {\r\n  return {\r\n    type: FETCHING_MOVIE,\r\n    title,\r\n    releaseYear,\r\n  }\r\n}\r\n\r\nexport function receivedMovie(movie) {\r\n  return {\r\n    type: RECEIVED_MOVIE,\r\n    movie,\r\n  };\r\n}\r\n\r\nexport function failedToReceiveMovie(error) {\r\n  return {\r\n    type: FAILED_TO_RECEIVE_MOVIE,\r\n    error,\r\n  };\r\n}\r\n\r\nexport function fetchMovies(title, releaseYear) {\r\n  return (dispatch) => {\r\n    dispatch(fetchingMovies(title, releaseYear));\r\n    getMovies(title, releaseYear).then(result => {\r\n      if (result.Error) {\r\n          return dispatch(failedToReceiveMovies(result.Error));\r\n      }\r\n      return dispatch(receivedMovies(result.Search));\r\n    }).catch(error =>\r\n      dispatch(failedToReceiveMovies(error))\r\n    );\r\n  }\r\n}\r\n\r\nfunction fetchingMovies(title, releaseYear) {\r\n  return {\r\n    type: FETCHING_MOVIES,\r\n    title,\r\n    releaseYear,\r\n  }\r\n}\r\n\r\nexport function receivedMovies(movies) {\r\n  return {\r\n    type: RECEIVED_MOVIES,\r\n    movies,\r\n  };\r\n}\r\n\r\nexport function failedToReceiveMovies(error) {\r\n  return {\r\n    type: FAILED_TO_RECEIVE_MOVIES,\r\n    error,\r\n  };\r\n}\r\n","import { API_ADDRESS } from './config';\r\n\r\nexport function getMovie(title, releaseYear = '') {\r\n  let address = `${API_ADDRESS}&t=${title}`;\r\n  if (releaseYear) {\r\n    address += `&y=${releaseYear}`;\r\n  }\r\n\r\n  return fetch(address).then(response => response.json());\r\n}\r\n\r\nexport function getMovies(titleSearchString, releaseYear = '', page = 1) {\r\n  let address = `${API_ADDRESS}&s=${titleSearchString}&page=${page}`;\r\n  if (releaseYear) {\r\n    address += `&y=${releaseYear}`;\r\n  }\r\n\r\n  return fetch(address).then(response => response.json());\r\n}\r\n","import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { fetchMovies } from './redux/actions';\r\n\r\nconst mapStateToProps = () => ({});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  dispatchFetchMovie: (title, releaseYear) => {\r\n    dispatch(fetchMovies(title, releaseYear));\r\n  },\r\n});\r\n\r\nclass SearchForm extends PureComponent {\r\n\r\n  static propTypes = {\r\n    dispatchFetchMovie: PropTypes.func.isRequired,\r\n  };\r\n\r\n  state = {\r\n    title: '',\r\n    releaseYear: '',\r\n  };\r\n\r\n  onTitleChange = (event) => {\r\n    this.setState({\r\n      ...this.state,\r\n      title: event.target.value,\r\n    });\r\n  }\r\n\r\n  onYearChange = (event) => {\r\n    this.setState({\r\n      ...this.state,\r\n      releaseYear: event.target.value,\r\n    });\r\n  }\r\n\r\n  onKeyPress = (event) => {\r\n    if (event.key === 'Enter') {\r\n      this.onSearch();\r\n    }\r\n  }\r\n\r\n  onSearch = () => {\r\n    const { dispatchFetchMovie } = this.props;\r\n    const { title, releaseYear } = this.state;\r\n    dispatchFetchMovie(title, releaseYear);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"search\">\r\n        <div>\r\n          <label htmlFor=\"search-title\">Title</label>\r\n          <input id=\"search-title\" name=\"title\" type=\"text\" value={this.state.title} onChange={this.onTitleChange} onKeyPress={this.onKeyPress}/>\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"search-year\">Release Year</label>\r\n          <input id=\"search-year\" name=\"release year\" type=\"number\" min=\"1900\" max=\"2019\" value={this.state.releaseYear} onChange={this.onYearChange} onKeyPress={this.onKeyPress}/>\r\n        </div>\r\n        <div>\r\n          <label>&nbsp;</label>\r\n          <button type=\"button\" onClick={this.onSearch}>search</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchForm);","import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nconst MOVIE_POSTER_FALLBACK = 'https://upload.wikimedia.org/wikipedia/commons/e/e6/Movie_stub_film.svg';\r\nconst ERROR_MOVIE_NOT_FOUND = 'Movie not found!';\r\nconst ERROR_TOO_MANY_RESULTS = 'Too many results.';\r\n\r\nconst mapStateToProps = (state) => ({\r\n  movies: state.movies,\r\n  fetching: state.fetching,\r\n});\r\n\r\nconst mapDispatchToProps = () => ({});\r\n\r\nclass MoviesList extends PureComponent {\r\n\r\n  static propTypes = {\r\n    movies: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    fetching: PropTypes.object.isRequired,\r\n  };\r\n\r\n  renderMovies() {\r\n    const { movies } = this.props;\r\n    return movies.map(movie => (\r\n      <li key={movie.imdbID} className=\"movie\">\r\n        <img src={movie.Poster === 'N/A' ? MOVIE_POSTER_FALLBACK : movie.Poster } alt={`poster of a movie ${movie.Title}`}/>\r\n        <h1>{movie.Title}</h1>\r\n        <h2>{movie.Year}</h2>\r\n      </li>)\r\n    );\r\n  }\r\n\r\n  getErrorMessage(error, title, releaseYear) {\r\n    switch (error) {\r\n      case ERROR_MOVIE_NOT_FOUND:\r\n        if (title) {\r\n          return releaseYear ?\r\n            `Could not find a movie with a title '${title}' released in ${releaseYear}...` : \r\n            `Could not find a movie with a title '${title}'...`;\r\n        } else {\r\n          return `We cannot search for movies without a title :(`;\r\n        }\r\n\r\n      case ERROR_TOO_MANY_RESULTS:\r\n        return 'That search yielded too many results. Please try to narrow down your search...'\r\n      \r\n      default:\r\n        return 'Unexpected error occurred. Sorry, please try again...';\r\n    }\r\n  }\r\n\r\n  renderError() {\r\n    const { fetching: { title, releaseYear, error} } = this.props;\r\n  \r\n    return (\r\n      <div className=\"error\">\r\n        <p>{this.getErrorMessage(error, title, releaseYear)}</p>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const { fetching: { title, releaseYear, error } } = this.props;\r\n    return (title || releaseYear) && error ? (\r\n      this.renderError()\r\n    ) : (\r\n      <ul className=\"movies\">\r\n        {this.renderMovies()}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MoviesList);\r\n","import React, { Component } from 'react';\n\nimport SearchForm from './SearchForm';\nimport MoviesList from './MoviesList';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <SearchForm/>\n        <MoviesList/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import {\r\n  FETCHING_MOVIE,\r\n  RECEIVED_MOVIE,\r\n  FAILED_TO_RECEIVE_MOVIE,\r\n  FETCHING_MOVIES,\r\n  RECEIVED_MOVIES,\r\n  FAILED_TO_RECEIVE_MOVIES,\r\n} from './actions';\r\n\r\nconst INITIAL_STATE = {\r\n  movies: [],\r\n  fetching: {\r\n    error: '',\r\n    title: '',\r\n    releaseYear: '',\r\n  },\r\n};\r\n\r\nexport default function (state = INITIAL_STATE, action) {\r\n  switch(action.type) {\r\n    case FETCHING_MOVIE:\r\n      // intentional fall-through\r\n    case FETCHING_MOVIES:\r\n      return {\r\n        ...INITIAL_STATE,\r\n        fetching: {\r\n          error: '',\r\n          title: action.title,\r\n          releaseYear: action.releaseYear,\r\n        },\r\n      };\r\n\r\n    case RECEIVED_MOVIE:\r\n      return {\r\n        ...state,\r\n        movies: action.movie === null ? [] : [action.movie],\r\n      };\r\n\r\n    case RECEIVED_MOVIES:\r\n      return {\r\n        ...state,\r\n        movies: action.movies === null ? [] : action.movies,\r\n      };\r\n\r\n    case FAILED_TO_RECEIVE_MOVIE:\r\n      // intentional fall-through\r\n    case FAILED_TO_RECEIVE_MOVIES:\r\n      return {\r\n        ...state,\r\n        fetching: {\r\n          ...state.fetching,\r\n          error: action.error,\r\n        },\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}","import { applyMiddleware, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport reducer from './reducer';\r\n\r\nconst storeInstance = createStore(reducer, applyMiddleware(thunk));\r\n\r\nexport default storeInstance;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}